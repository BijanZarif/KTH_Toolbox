#Configuration file for Nek5000 framework developed at KTH
# Place for short description; doxygen style
/**
@defgroup sponge_box  Sponge_box module
@ingroup forcing

@brief Sponge/fringe for simple box mesh

@details
Set of routines to apply sponge (fringe in periodic domains) for simple box mesh. It calculates a volume forcing
\f[ \vec F = \lambda(x) \left( \vec U - \vec u\right),\f]
with \f$ \lambda(x), \vec U\f$ and \f$ \vec u\f$ beeing non-negative sponge/fringe function, constant in time
reference velocity field and current velocity field respectively. 1-dimensional sponge funcion is definde as
\f[ \lambda(x) = \lambda_{max} *\left[S\left((x_{min} + \Delta_{wl} - x)/\Delta_{dl} \right) + 
S\left((x - x_{max} + \Delta_{wr})/\Delta_{dr} \right) \right],\f]
where:
- \f$ \lambda_{max} \f$ - sponge strenght,
- \f$ S(x) \f$ - step function @ref mth_stepf,
- \f$ x_{min}, x_{max} \f$ - left and right box boundaries,
- \f$ \Delta_{wl}, \Delta_{wr} \f$ - left and right sponge section width,
- \f$ \Delta_{dl}, \Delta_{dr} \f$ - left and right sponge section drop/rise width.

In our implementation each dimension is treated separately and the final 3-dimensional function takes a 
maximum value of its 1-dimensional components. \f$ \Delta_{wl}\f$ and \f$ \Delta_{wr} \f$ can be set to zero.

@mod_interface
@interface_list Interface provided:
-# @ref spng_box_param_get
-# @ref spng_box_init
-# @ref spng_box_forcing

@mod_interface_example
@code{.f}
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'          ! FF[XYZ]
      include 'SOLN'            ! V[XYZ]

      FFX = 0.0
      FFY = 0.0
      FFZ = 0.0

!     add sponge
      call spng_box_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg)

      return
      end
!-----------------------------------------------------------------------
      subroutine userchk
      include 'TSTEP'           ! ISTEP
      include 'SOLN'            ! V[XYZ]
      
      if (ISTEP.eq.0) then
!     initialise runtime parameters
         call spng_box_param_get
!     initialise module
!     provide initial velocity condition as reference field for sponge
         call spng_box_init(vx,vy,vz)
      endif

      return
      end
@endcode

@mod_param
@param_list Parameters provided by sponge_box module (include file - \a SPONGRBD):
|Varaible | Type |Runtime parameter | Description|
|---------|------|------------------|------------|
|spng_str | real | _spongeb:strenght | sponge strength |
|spng_wl(1) | real | _spongeb:widthlx | sponge left section width; dimension X |
|spng_wl(2) | real | _spongeb:widthly | sponge left section width; dimension Y |
|spng_wl(3) | real | _spongeb:widthlz | sponge left section width; dimension Z |
|spng_wr(1) | real | _spongeb:widthrx | sponge right section width; dimension X |
|spng_wr(2) | real | _spongeb:widthry | sponge right section width; dimension Y |
|spng_wr(3) | real | _spongeb:widthrz | sponge right section width; dimension Z |
|spng_dl(1) | real | _spongeb:droplx | sponge left drop/rise section width; dimension X |
|spng_dl(2) | real | _spongeb:droply | sponge left drop/rise section width; dimension Y |
|spng_dl(3) | real | _spongeb:droplz | sponge left drop/rise section width; dimension Z |
|spng_dr(1) | real | _spongeb:droprx | sponge right drop/rise section width; dimension X |
|spng_dr(2) | real | _spongeb:dropry | sponge right drop/rise section width; dimension Y |
|spng_dr(3) | real | _spongeb:droprz | sponge right drop/rise section width; dimension Z |

@mod_param_example
@code{.txt}
[_SPONGEB]
strength = 1.0
widthlx = 4.0
widthly = 0.0
widthlz = 0.0
widthrx = 4.0
widthry = 0.0
widthrz = 0.0
droplx = 2.0
droply = 0.0
droplz = 0.0
droprx = 2.0
dropry = 0.0
droprz = 0.0
@endcode


*/
#List of existing submodules
SUBMODULES 

#List of conflicting submodules
EXCLUSIVE

#Default submodules
DEFAULT

#List of conflicting modules
CONFLICTS

#List of required modules
REQUIRED utility/math

#List of object files
OBJECT spongeb.o

#List of include files
INCLUDE SPONGEBD
 